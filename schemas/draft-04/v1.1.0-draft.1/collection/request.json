{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "#/definitions/request",
  "title": "Request",
  "description": "A request represents an HTTP request.",
  "type": "object",
  "properties": {
    "folder": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "description": "Postman requests may or may not be a part of a folder. If this request belongs to a folder, that folder's unique ID (which is a [UUID](https://en.wikipedia.org/wiki/Globally_unique_identifier)) is stored in this field."
    },
    "id": {
      "type": "string",
      "description": "Postman can store a number of requests in each collection. In order to preserve the order of each request, we need to be able to identify requests uniquely. This field is a UUID assigned to each request."
    },
    "name": {
      "type": "string",
      "description": "Sometimes, you just need to call your request 'Bob'. Postman will let you do that, and store the name you give in this field."
    },
    "dataMode": {
      "type": "string",
      "enum": [
        "raw",
        "urlencoded",
        "params"
      ],
      "description": "A request can have a specific data mode, and Postman supports three."
    },
    "data": {
      "oneOf": [
        {
          "type": "array",
          "description": "Data is an array of key-values that the request goes with. POST data, PUT data, etc goes here.",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean"
              },
              "type": {
                "enum": [
                  "file",
                  "text"
                ]
              }
            }
          }
        },
        {
          "type": "null"
        }
      ]
    },
    "descriptionFormat": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "html",
            "markdown"
          ]
        },
        {
          "type": "null"
        }
      ],
      "description": "A request can have an associated description text. Since description is meant to be long, it can be in either ``html`` or ``markdown`` formats. This field specifies that format."
    },
    "description": {
      "type": "string",
      "description": "The description of this request. Can be as long as you want. Postman also supports two formats for your description, ``markdown`` and ``html``."
    },
    "headers": {
      "type": "string",
      "description": "No HTTP request is complete without its headers, and the same is true for a Postman request. This field contains all the HTTP Headers in a raw string format."
    },
    "method": {
      "type": "string",
      "enum": [
        "GET",
        "PUT",
        "POST",
        "PATCH",
        "DELETE",
        "COPY",
        "HEAD",
        "OPTIONS",
        "LINK",
        "UNLINK",
        "PURGE",
        "LOCK",
        "UNLOCK",
        "PROPFIND",
        "VIEW"
      ],
      "description": "The HTTP method associated with this request."
    },
    "currentHelper": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "description": "Postman can associate helpers with a request, which help with activities such as OAuth, Basic Authentication, etc. The type of helper associated with this request is stored in this field."
    },
    "helperAttributes": {
      "oneOf": [
        {
          "type": "string"
        },
        //                {
        //                    "type": "object",
        //                    "title": "AWS-SignatureV4",
        //                    "properties": {
        //                        "id": {
        //                            "type": "string",
        //                            "enum": ["awsSigV4"],
        //                            "description": "This field contains the type of the helper. In this case, it is ``awsSigV4``"
        //                        },
        //                        "accessKey": {
        //                            "type": "string",
        //                            "description": "AWS Signature V4 calculation requires the AWS Access Key of the AWS IAM user being used. This key is stored in this field.\n *Note: Do not use your AWS root credentials here.*"
        //                        },
        //                        "secretKey": {
        //                            "type": "string",
        //                            "description": "The AWS Secret key associated with the Access Key is stored in this field.\n *Note: Do not use your AWS root credentials here.*"
        //                        },
        //                        "region": {
        //                            "type": "string",
        //                            "description": "The AWS region code, must be one of the ones mentioned in the [AWS Documentation](http://docs.aws.amazon.com/general/latest/gr/rande.html)"
        //                        },
        //                        "service": {
        //                            "type": "string",
        //                            "description": "The AWS Service endpoint. Refer to the [AWS Documentation](http://docs.aws.amazon.com/general/latest/gr/rande.html) for possible values."
        //                        }
        //                    },
        //                    "required": [
        //                        "id"
        //                    ]
        //                },
        {
          "type": "object",
          "title": "DigestAuth",
          "description": "Helper attributes for Digest Authentication",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "digest"
              ],
              "description": "This field contains the type of the helper. In this case, it is ``digest``"
            },
            "algorithm": {
              "type": "string",
              "description": "The hashing algorithm used in this Digest authenticated request is stored in this field."
            },
            "username": {
              "type": "string",
              "description": "The username to be used for digest Authentication is stored in this field."
            },
            "realm": {
              "type": "string",
              "description": "The authentication 'realm' is stored in this field. Refer to [RFC 2617](https://tools.ietf.org/html/rfc2617) for details."
            },
            "password": {
              "type": "string",
              "description": "The password to be used for digest Authentication is stored in this field."
            },
            "nonce": {
              "type": "string",
              "description": "The Digest server challenges clients. A nonce is a part of that challenge, stored in this field."
            },
            "qop": {
              "type": "string",
              "description": "Indicates what \"quality of protection\" the client has applied to the message."
            },
            "nonceCount": {
              "type": "string",
              "description": "The nonceCount is the hexadecimal count of the number of requests (including the current request) that the client has sent with the nonce value in this request."
            },
            "clientNonce": {
              "type": "string",
              "description": "A client nonce enhances the security of HTTP Digest Authentication, and it is stored in this field."
            },
            "opaque": {
              "type": "string",
              "description": "A string of data, specified by the server, which should be returned by the client unchanged."
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "type": "object",
          "title": "BasicAuth",
          "description": "Helper attributes for Basic Authentication",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "basic"
              ],
              "description": "This field contains the type of the helper. In this case, it is ``basic``"
            },
            "username": {
              "type": "string",
              "description": "The username to be used for Basic Authentication is stored in this field."
            },
            "password": {
              "type": "string",
              "description": "The password to be used for digest Authentication is stored in this field."
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "type": "object",
          "title": "OAuth1",
          "description": "Helper attributes for OAuth-1 Authentication",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "oAuth1"
              ],
              "description": "This field contains the type of the helper. In this case, it is ``oAuth1``"
            },
            "consumerKey": {
              "type": "string",
              "description": "The oAuth1 Consumer Secret, along with the Consumer Key authenticates the client. This field holds the oAuth1 Consumer Key"
            },
            "consumerSecret": {
              "type": "string",
              "description": "The oAuth1 Consumer Secret, along with the Consumer Key authenticates the client. The consumer secret is stored in this field."
            },
            "token": {
              "type": "string",
              "description": "The request token is a temporary credential, and is stored by Postman in this field."
            },
            "tokenSecret": {
              "type": "string",
              "description": "The request token secret is a temporary credential."
            },
            "signatureMethod": {
              "type": "string",
              "description": "The name of the signature method used by the client to sign the request."
            },
            "nonce": {
              "type": "string",
              "description": "A nonce is a random string, uniquely generated by the client to allow the server to verify that a request has never been made before and helps prevent replay attacks when requests are made over a non-secure channel."
            },
            "version": {
              "type": "string",
              "description": "The oAuth version, usually, this is ``1.0`` for OAuth-1"
            },
            "realm": {
              "type": "string",
              "description": "The realm directive is required for all authentication schemes that issue a challenge. Refer to [RFC 2617](http://tools.ietf.org/html/rfc2617#section-1.2) for more details."
            },
            "header": {
              "type": "boolean",
              "description": "Set this parameter to 'true' if you want Postman to add the OAuth parameters to the request headers. If false, the query string is used instead."
            },
            "auto": {
              "type": "boolean",
              "description": "This field controls whether OAuth1 parameters are automatically added to the request."
            },
            "includeEmpty": {
              "type": "boolean",
              "description": "If you would like to include empty parameters in the request, set this to 'true', else set it to 'false'"
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "type": "null"
        },
        {
          // Empty object
          "type": "object",
          "additionalProperties": false,
          "properties": {}
        }
      ],
      "description": "A helper may require a number of parameters to actually be helpful. The parameters used by the helper can be stored in this field, as an object. E.g when using Basic Authentication, the username and password will be stored here."
    },
    "pathVariables": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object"
        },
        {
          "type": "null"
        }
      ],
      "description": "A Postman request allows you to use Path Variables in a request, e.g: ``/search/:bookId``. This field stores these variables."
    },
    "url": {
      "type": "string",
      "description": "Contains the complete URL for this request, along with the path variables, if any."
    },
    "preRequestScript": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "description": "In some use cases, it's necessary to run a bit of code or perform some tasks before sending a request. Postman implements this feature by the use of this field. Any code written to this field is run before running a request."
    },
    "tests": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "description": "Postman allows you to define a script that is run after executing the request, which may act on the response. Such a script is stored in this field."
    },
    "time": {
      "type": "number",
      "multipleOf": 1,
      "description": "The timestamp for this request."
      // TODO: ask what this is
    },
    "responses": {
      "type": "array",
      "description": "A Postman request can have multiple responses associated with it. These responses are stored in this field.",
      "items": {
        "$ref": "#/definitions/response"
      }
    },
    "rawModeData": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        },
        {
          "type": "array"
        }
      ],
      "description": "Contains the raw data (parameters) that Postman sends to the server"
    },
    "collectionId": {
      "type": "string",
      "description": "This field contains the unique ID of the collection to which this request belongs."
    }
  },
  "required": [
    "id",
    "method",
    "url",
    "headers",
    "name",
    "collectionId"
  ]
}
