{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "#/definitions/request",
  "title": "Postman Request",
  "description": "A request represents an HTTP request.",
  "type": "object",
  "properties": {
    "url": {
      "type": "object",
      "description": "Contains the complete broken-down URL for this request, along with the path variables, if any.",
      "properties": {
        "protocol": {
          "type": "string",
          "description": "The protocol associated with the request, E.g: 'http'"
        },
        "domain": {
          "type": "string",
          "description": "The domain for the URL, E.g: api.yourdomain.com"
        },
        "segments": {
          "type": "array",
          "description": "The complete path of the current url, broken down into segments. A segment could be a string, or a path variable.",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "port": {
          "type": "string",
          "description": "The port number present in this URL. An empty value implies 80/443 depending on whether the protocol field contains http/https."
        },
        "query": {
          "type": "array",
          "description": "An array of QueryParams, which is basically the query string part of the URL, parsed into separate variables",
          "items": {
            "type": "object",
            "title": "QueryParam",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            }
          }
        },
        "fragment": {
          "description": "Contains the URL fragment (if any). Usually this is not transmitted over the network, but it could be useful to store this in some cases.",
          "type": "string"
        }
      }
    },
    "method": {
      "description": "The HTTP method associated with this request.",
      "type": "string",
      "enum": [
        "GET",
        "PUT",
        "POST",
        "PATCH",
        "DELETE",
        "COPY",
        "HEAD",
        "OPTIONS",
        "LINK",
        "UNLINK",
        "PURGE",
        "LOCK",
        "UNLOCK",
        "PROPFIND",
        "VIEW"
      ]
    },
    "_postman_currentHelper": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "description": "Postman can associate helpers with a request, which help with activities such as OAuth, Basic Authentication, etc. The type of helper associated with this request is stored in this field."
    },
    "_postman_helperAttributes": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "title": "AWS-SignatureV4",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "awsSigV4"
              ],
              "description": "This field contains the type of the helper. In this case, it is ``awsSigV4``"
            },
            "accessKey": {
              "type": "string",
              "description": "AWS Signature V4 calculation requires the AWS Access Key of the AWS IAM user being used. This key is stored in this field.\n *Note: Do not use your AWS root credentials here.*"
            },
            "secretKey": {
              "type": "string",
              "description": "The AWS Secret key associated with the Access Key is stored in this field.\n *Note: Do not use your AWS root credentials here.*"
            },
            "region": {
              "type": "string",
              "description": "The AWS region code, must be one of the ones mentioned in the [AWS Documentation](http://docs.aws.amazon.com/general/latest/gr/rande.html)"
            },
            "service": {
              "type": "string",
              "description": "The AWS Service endpoint. Refer to the [AWS Documentation](http://docs.aws.amazon.com/general/latest/gr/rande.html) for possible values."
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "type": "object",
          "title": "DigestAuth",
          "description": "Helper attributes for Digest Authentication",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "digest"
              ],
              "description": "This field contains the type of the helper. In this case, it is ``digest``"
            },
            "algorithm": {
              "type": "string",
              "description": "The hashing algorithm used in this Digest authenticated request is stored in this field."
            },
            "username": {
              "type": "string",
              "description": "The username to be used for digest Authentication is stored in this field."
            },
            "realm": {
              "type": "string",
              "description": "The authentication 'realm' is stored in this field. Refer to [RFC 2617](https://tools.ietf.org/html/rfc2617) for details."
            },
            "password": {
              "type": "string",
              "description": "The password to be used for digest Authentication is stored in this field."
            },
            "nonce": {
              "type": "string",
              "description": "The Digest server challenges clients. A nonce is a part of that challenge, stored in this field."
            },
            "qop": {
              "type": "string",
              "description": "Indicates what \"quality of protection\" the client has applied to the message."
            },
            "nonceCount": {
              "type": "string",
              "description": "The nonceCount is the hexadecimal count of the number of requests (including the current request) that the client has sent with the nonce value in this request."
            },
            "clientNonce": {
              "type": "string",
              "description": "A client nonce enhances the security of HTTP Digest Authentication, and it is stored in this field."
            },
            "opaque": {
              "type": "string",
              "description": "A string of data, specified by the server, which should be returned by the client unchanged."
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "type": "object",
          "title": "BasicAuth",
          "description": "Helper attributes for Basic Authentication",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "basic"
              ],
              "description": "This field contains the type of the helper. In this case, it is ``basic``"
            },
            "username": {
              "type": "string",
              "description": "The username to be used for Basic Authentication is stored in this field."
            },
            "password": {
              "type": "string",
              "description": "The password to be used for digest Authentication is stored in this field."
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "type": "object",
          "title": "OAuth1",
          "description": "Helper attributes for OAuth-1 Authentication",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "oAuth1"
              ],
              "description": "This field contains the type of the helper. In this case, it is ``oAuth1``"
            },
            "consumerKey": {
              "type": "string",
              "description": "The oAuth1 Consumer Secret, along with the Consumer Key authenticates the client. This field holds the oAuth1 Consumer Key"
            },
            "consumerSecret": {
              "type": "string",
              "description": "The oAuth1 Consumer Secret, along with the Consumer Key authenticates the client. The consumer secret is stored in this field."
            },
            "token": {
              "type": "string",
              "description": "The request token is a temporary credential, and is stored by Postman in this field."
            },
            "tokenSecret": {
              "type": "string",
              "description": "The request token secret is a temporary credential."
            },
            "signatureMethod": {
              "type": "string",
              "description": "The name of the signature method used by the client to sign the request."
            },
            "nonce": {
              "type": "string",
              "description": "A nonce is a random string, uniquely generated by the client to allow the server to verify that a request has never been made before and helps prevent replay attacks when requests are made over a non-secure channel."
            },
            "version": {
              "type": "string",
              "description": "The oAuth version, usually, this is ``1.0`` for OAuth-1"
            },
            "realm": {
              "type": "string",
              "description": "The realm directive is required for all authentication schemes that issue a challenge. Refer to [RFC 2617](http://tools.ietf.org/html/rfc2617#section-1.2) for more details."
            },
            "header": {
              "type": "boolean",
              "description": "Set this parameter to 'true' if you want Postman to add the OAuth parameters to the request headers. If false, the query string is used instead."
            },
            "auto": {
              "type": "boolean",
              "description": "This field controls whether OAuth1 parameters are automatically added to the request."
            },
            "includeEmpty": {
              "type": "boolean",
              "description": "If you would like to include empty parameters in the request, set this to 'true', else set it to 'false'"
            }
          },
          "required": [
            "id"
          ]
        },
        {
          "type": "null"
        },
        {
          // Empty object
          "type": "object",
          "additionalProperties": false,
          "properties": {}
        }
      ],
      "description": "A helper may require a number of parameters to actually be helpful. The parameters used by the helper can be stored in this field, as an object. E.g when using Basic Authentication, the username and password will be stored here."
    },
    "headers": {
      "type": "array",
      "description": "No HTTP request is complete without its headers, and the same is true for a Postman request. This field is an array containing all the headers.",
      "items": {
        "type": "object",
        "title": "Header",
        "description": "Represents a single HTTP Header",
        "properties": {
          "key": {
            "description": "This holds the LHS of the HTTP Header, e.g ``Content-Type`` or ``X-Custom-Header``",
            "type": "string"
          },
          "value": {
            "type": "string",
            "description": "The value (or the RHS) of the Header is stored in this field."
          },
          "description": {
            "description": "An optional field that can be used to elaborate on the use of this particular header.",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      }
    },
    "data": {
      "type": "object",
      "description": "This field contains the data usually contained in the request body.",
      "properties": {
        "mode": {
          "description": "Postman stores the type of data associated with this request in this field.",
          "enum": [
            "raw",
            "urlencoded",
            "params"
          ]
        },
        "content": {
          "description": "Contains the request body data. If the mode is ``raw``, this field contains the raw data in string format. Otherwise, it contains an array of Parameters.",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "title": "Parameter",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "events": {
      "type": "object",
      "description": "Postman allows you to run scripts when running a request, and each request can have scripts for \"setup\", \"test\" and \"teardown\" events. These coould be scripts defined inline, or an ID that points to a global script",
      "properties": {
        "test": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/script"
            }
          ]
        },
        "testLegacy": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/script"
            }
          ]
        }
      }
    }
  },
  "required": [
    "method",
    "url",
    "headers"
  ]
}
